[
  {
    "category": "Team",
    "title": "K-venture",
    "date": "2024-07-26 ~ 2024-08-30",
    "src": "/assets/images/thumbnail_kventure.png",
    "description": "지역 주민들이 제공하는 다채로운 한국 체험을 여행자와 연결하는 온라인 플랫폼",
    "skills": [
      "next",
      "typescript",
      "tanstackquery",
      "jotai",
      "kakaoapi",
      "vercel",
      "jira",
      "tailwindcss"
    ],
    "siteUrl": "https://k-venture-main.vercel.app",
    "githubUrl": "https://github.com/soma0078/K-venture",
    "thumbnailImages": [
      "/assets/images/kventure_desktop.png",
      "/assets/images/kventure_activity_page.png",
      "/assets/images/kventure_my_activity_page.png",
      "/assets/images/kventure_activity_register_page.png",
      "/assets/images/kventure_reservation_list.png",
      "/assets/images/kventure_mypage.png",
      "/assets/images/kventure_search_page.png",
      "/assets/images/kventure_mobile.png",
      "/assets/images/kventure_activity_mobile.png",
      "/assets/images/kventure_reservation_mobile.png"
    ],
    "implementation": [
      "회원가입 및 로그인 시 이메일, 비밀번호 유효성 검사",
      "체험 목록 카테고리, 가격순 필터 및 검색 기능",
      "체험 상세 정보 제공 및 예약 가능 날짜 표시 기능",
      "예약 가능한 인원, 시간 선택 후 체험 예약 신청 기능",
      "체험 예약 신청 확인 및 승인/거절 기능",
      "체험 등록, 수정, 삭제 및 관리",
      "예약 신청 내역 관리 및 후기 작성 기능",
      "내 정보(닉네임, 프로필 이미지, 비밀번호) 수정 기능",
      "예약 승인 및 거절 알림 기능"
    ],
    "contribution": [
      {
        "subtitle": "프로젝트 초기 세팅 및 린팅 설정",
        "details": [
          "프로젝트 초기 세팅을 위해 폴더 구조를 정리하고, ESLint, Prettier, Husky, lint-staged, commitlint 등을 설정하여 코드 품질과 일관성을 유지했습니다. ESLint와 Prettier를 통합하여 코드 린팅과 자동 포맷팅을 설정하고, Husky를 활용하여 Git 훅을 통해 커밋 전 자동으로 타입 검사와 린트 규칙을 적용했습니다. 또한, commitlint를 사용해 커밋 메시지가 일정 규칙을 따르도록 하여 팀 간 일관된 커밋 메시지를 유지하도록 했습니다."
        ]
      },
      {
        "subtitle": "내 정보 페이지 및 상태 관리",
        "details": [
          "Jotai를 사용해 내 정보 페이지에서 닉네임, 이미지, 비밀번호 등의 상태를 관리하며, 입력 필드와 이미지 업로드 상태를 실시간으로 반영해 UI를 동기화했습니다. 이를 통해 사용자 프로필 수정 시 일관된 경험을 제공했습니다."
        ]
      },
      {
        "subtitle": "반응형 이미지 레이아웃 및 Swiper 구현",
        "details": [
          "체험 상세 페이지 이미지를 데스크톱에서는 그 수에 따라 그리드 레이아웃을 자동 조정하고, 모바일에서는 Swiper.js로 슬라이드형 배너를 적용해 다양한 화면 크기에서 최적화된 경험을 제공했습니다."
        ]
      },
      {
        "subtitle": "스켈레톤 UI로 부드러운 로딩 경험 제공",
        "details": [
          "체험 상세 페이지 진입 시 스켈레톤 UI를 적용하여 데이터를 로딩하는 동안 사용자에게 시각적 피드백을 제공, 부드러운 로딩 경험을 개선했습니다."
        ]
      },
      {
        "subtitle": "체험 상세 페이지 후기 데이터 비동기 처리 및 페이지네이션 구현",
        "details": [
          "Tanstack Query와 usePagination 훅을 사용해 후기 데이터를 비동기적으로 처리하고, 페이지네이션 기능을 구현했습니다. 페이지 전환 시 빠른 데이터 로딩을 위해 프리패칭을 적용하여 성능을 최적화했습니다."
        ]
      }
    ],
    "troubleshooting": [
      {
        "subtitle": "체험 등록 수정 시 초기 이미지 불러오기에서 발생한 CORS 문제 해결",
        "details": [
          "문제 상황 : 체험 등록을 수정할 때, 이전에 업로드한 이미지 파일을 불러오는데 CORS 정책 오류가 발생했습니다. 강력 새로고침 후 이미지가 정상적으로 로드되었습니다.",
          "원인 : 브라우저가 이전 CORS 정책을 캐시하고 있었기 때문에, 새로운 CORS 설정이 반영되지 않았습니다.",
          "해결 : 강력 새로고침을 통해 브라우저 캐시를 무시하고, 서버에서 최신 CORS 설정을 받아왔습니다."
        ]
      }
    ]
  },
  {
    "category": "Team",
    "title": "페이플러스",
    "date": "2024-06-21 ~ 2024-07-09",
    "src": "/assets/images/thumbnail_payplus.png",
    "description": "급한 일손을 빠르게 찾고, 높은 시급으로 일자리를 매칭하는 서비스",
    "skills": ["next", "typescript", "vercel", "scss"],
    "siteUrl": "https://payplus-x.vercel.app/listPage",
    "githubUrl": "https://github.com/soma0078/PayPlus",
    "thumbnailImages": [
      "/assets/images/payplus_desktop.png",
      "/assets/images/payplus_store_page_staff.png",
      "/assets/images/payplus_store_page_owner.png",
      "/assets/images/payplus_staff_page.png",
      "/assets/images/payplus_store_page_mobile.png",
      "/assets/images/payplus_store_register_mobile.png"
    ],
    "implementation": [
      "사용자 로그인에 따라 상단 네비게이션 바의 버튼 변경 (사장님: '내 가게', 알바님: '내 프로필')",
      "회원가입 및 로그인 시 이메일, 비밀번호 유효성 검사",
      "사장님은 가게 등록, 정보 수정, 공고 등록 및 관리",
      "알바님은 프로필 등록 및 공고 신청/취소 기능",
      "공고 리스트 페이지에서 필터링 및 정렬 기능",
      "공고 상세 페이지에서 신청 및 취소 기능, 마감 공고 표시"
    ],
    "contribution": [
      {
        "subtitle": "가게 정보 등록 및 편집 페이지 작업",
        "details": [
          "Next.js의 SSR을 활용해 실시간으로 서버에서 가게 정보를 가져오고, React의 useState와 useEffect를 통해 동적 폼 데이터를 관리하여 상태를 즉각적으로 반영했습니다. 이를 통해 SEO 최적화와 데이터 일관성을 유지하며, 사용자 편의성을 향상시켰습니다."
        ]
      },
      {
        "subtitle": "Daum 우편번호 API를 통한 주소 검색 기능 구현",
        "details": [
          "Daum 우편번호 API와 React의 useState를 활용해 주소 검색 및 자동 입력 기능을 구현했습니다. 사용자가 선택한 주소가 자동으로 필드에 반영되어, 주소 입력을 간소화하고 사용자 경험을 개선했습니다."
        ]
      },
      {
        "subtitle": "Presigned URL 생성 및 S3 이미지 업로드 기능 구현",
        "details": [
          "AWS S3에 이미지를 업로드하기 위해 presigned URL을 생성하고, 이를 통해 사용자 파일을 직접 업로드하는 기능을 구현했습니다. 업로드 오류를 처리하여 사용자에게 실시간으로 피드백을 제공함으로써 안정성을 높였습니다."
        ]
      }
    ],
    "troubleshooting": [
      {
        "subtitle": "S3 이미지 업로드 후 프리뷰 문제 해결",
        "details": [
          "문제 상황 : 이미지 업로드 후 프리뷰에서 이미지가 표시되지 않았습니다.",
          "원인 : presigned URL에 포함된 보안 인증을 위한 쿼리 매개변수(?X-Amz-*)가 이미지 렌더링을 방해하여, 정상적으로 미리보기가 표시되지 않았습니다.",
          "해결 : 쿼리 매개변수를 제외한 순수 URL을 추출하여 미리보기에서 사용했습니다. 이를 위해 `const imageUrl = presignedUrl.split('?')[0];`로 URL을 처리했습니다."
        ]
      }
    ]
  },
  {
    "category": "Team",
    "title": "오픈마인드",
    "date": "2024-04-30 ~ 2024-05-17",
    "src": "/assets/images/thumbnail_openmind.png",
    "description": "익명으로 자유롭게 질문하고, 다양한 답변을 통해 궁금증을 해결할 수 있는 플랫폼",
    "skills": ["react", "javascript", "tailwindcss", "netlify"],
    "siteUrl": "https://openyourmind.netlify.app",
    "githubUrl": "https://github.com/soma0078/Openmind",
    "thumbnailImages": [
      "/assets/images/openmind_main_page.png",
      "/assets/images/openmind_list_page.png",
      "/assets/images/openmind_question_page.png",
      "/assets/images/openmind_desktop.png",
      "/assets/images/openmind_modal.png"
    ],
    "implementation": [
      "사용자 이름을 입력한 후 '질문 받기' 버튼을 클릭하여 피드를 생성하고 페이지 이동 기능",
      "질문 목록 최신순 정렬 및 반응형 웹 디자인",
      "질문 상태 표시(답변 완료/미답변) 및 질문 작성 모달 기능",
      "답변 입력 후 버튼 활성화, 수정 및 삭제 기능",
      "무한 스크롤, 클립보드 복사, 카카오톡/페이스북 공유 기능"
    ],
    "contribution": [
      {
        "subtitle": "질문 작성 모달 UI 및 상태 관리",
        "details": [
          "React의 useState와 useEffect 훅을 사용하여 모달 UI를 관리하고, 외부 클릭 시 자동으로 모달이 닫히도록 구현했습니다. 질문 제출 시 Fetch API를 통해 실시간으로 질문을 업데이트했습니다."
        ]
      },
      {
        "subtitle": "질문 데이터 무한 스크롤",
        "details": [
          "useEffect를 이용해 스크롤 이벤트를 감지하고, Fetch API로 질문 데이터를 비동기로 로드하여 하단에 도달할 때 추가 데이터를 요청하도록 구현했습니다."
        ]
      },
      {
        "subtitle": "Notion을 활용한 문서 및 일정 관리",
        "details": [
          "Notion을 통해 프로젝트 계획서, 일정표, 회의록 등을 관리하며, 팀원들이 실시간으로 정보를 공유하고 협업할 수 있도록 지원했습니다."
        ]
      }
    ],
    "troubleshooting": [
      {
        "subtitle": "무한 스크롤 중복 데이터 요청 문제 해결",
        "details": [
          "문제 상황 : 무한 스크롤 구현 시, 스크롤 하단에 도달했을 때 추가 데이터를 요청하는데 중복된 데이터 요청이 발생했습니다.",
          "원인 : `loading` 상태를 고려하지 않아 데이터가 로드 중일 때도 계속해서 요청이 발생하는 문제가 있었습니다.",
          "해결 : 데이터 요청 중인 상태를 확인하기 위해 !loading 조건을 사용하여, 데이터가 요청 중일 때는 추가적인 요청이 발생하지 않도록 방지했습니다."
        ]
      }
    ]
  },
  {
    "category": "Single",
    "title": "포트폴리오",
    "date": "2024-10-20 ~ 2024-11-07",
    "src": "/assets/images/thumbnail_portfolio.png",
    "description": "React와 JavaScript로 제작한 나만의 프로젝트를 소개하는 반응형 웹 포트폴리오",
    "skills": ["react", "typescript", "styledcomponents", "vercel"],
    "siteUrl": "https://portfolio-leesonga.netlify.app",
    "githubUrl": "https://github.com/soma0078/portfolio",
    "thumbnailImages": [
      "/assets/images/portfolio_desktop.png",
      "/assets/images/portfolio_tablet.png",
      "/assets/images/portfolio_mobile.png"
    ],
    "implementation": [
      "메인 비주얼 화면 및 인트로 애니메이션 구현",
      "아코디언 기능을 활용한 경력 및 교육 내용 토글 기능",
      "프로젝트 목록 정렬 기능",
      "프로젝트 및 경력 작업물 상세 정보 팝업 기능",
      "모바일, 태블릿, 데스크톱에 최적화된 반응형 웹 디자인 구현"
    ],
    "contribution": [
      {
        "subtitle": "인트로 애니메이션 구현",
        "details": [
          "CSS 애니메이션을 활용하여 사이트 첫 화면에 동적 효과를 적용하고, 사용자에게 매력적인 첫 인상을 제공했습니다."
        ]
      },
      {
        "subtitle": "프로젝트 목록 정렬 구현",
        "details": [
          "카테고리 선택에 따라 프로젝트 목록을 동적으로 필터링하여 사용자가 원하는 항목을 쉽게 찾을 수 있도록 구성했습니다.",
          "React의 상태 관리와 데이터 필터링을 활용해 카테고리별 프로젝트 정렬 기능을 구현했습니다."
        ]
      },
      {
        "subtitle": "가로 스크롤 구현",
        "details": [
          "사용자의 스크롤 이벤트를 감지해 콘텐츠를 가로로 스크롤할 수 있도록 구성했습니다.",
          "React의 ref와 JavaScript 이벤트 핸들러를 활용하여 자연스러운 가로 스크롤 동작을 구현했습니다."
        ]
      }
    ],
    "troubleshooting": [
      {
        "subtitle": "가로 스크롤 중 세로 스크롤 발생 문제 해결",
        "details": [
          "문제상황: 가로 스크롤을 할 때 세로 스크롤이 의도치 않게 발생하여 화면이 아래로 내려갔습니다.",
          "원인: 가로 스크롤과 세로 스크롤이 동시에 발생하는 문제로, 브라우저의 기본 스크롤 동작이 차단되지 않았습니다.",
          "해결: `overscroll-behavior: contain`을 추가하여 가로 스크롤 중 세로 스크롤 전파를 차단했습니다."
        ]
      }
    ]
  }
]
